// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateServiceFileContent > should generate correct service file content for a User model 1`] = `
"
import type { PrismaClient } from '@prisma/client';
// We need to import the actual model type separately when verbatimModuleSyntax is true
import type { User as UserType } from '@prisma/client';
// Import input types from Zod schemas (adjust path if necessary)
import { createUserSchema, updateUserSchema } from './schema';
import { z } from 'zod';
import type { Context } from 'hono';

// Define types inferred from Zod schemas for input validation
type CreateUserInput = z.infer<typeof createUserSchema>;
type UpdateUserInput = z.infer<typeof updateUserSchema>;

/**
 * Helper function to extract Prisma client from context with error handling
 */
const getPrismaClient = (c: Context): PrismaClient => {
  const prisma = c.get('prisma');
  if (!prisma) {
    throw new Error('Prisma client not found in context. Make sure to use the prismaMiddleware.');
  }
  return prisma;
};

/**
 * Finds multiple User records.
 * @param c The Hono context containing the Prisma client.
 * @returns A promise resolving to an array of User records.
 */
export const findManyUser = async (c: Context): Promise<UserType[]> => {
  try {
    const prisma = getPrismaClient(c);
    return await prisma.user.findMany();
  } catch (error) {
    console.error('Error fetching Users:', error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not fetch Users');
  }
};

/**
 * Creates a new User record.
 * @param c The Hono context containing the Prisma client.
 * @param data The data for the new User.
 * @returns A promise resolving to the created User record.
 */
export const createUser = async (
  c: Context, 
  data: CreateUserInput
): Promise<UserType> => {
  try {
    const prisma = getPrismaClient(c);
    // Input data is assumed to be validated by Zod schema in the route handler
    return await prisma.user.create({ data });
  } catch (error) {
    console.error('Error creating User:', error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not create User');
  }
};

/**
 * Finds a single User record by its ID.
 * @param c The Hono context containing the Prisma client.
 * @param id The ID of the User to find.
 * @returns A promise resolving to the User record or null if not found.
 */
export const findUserById = async (
  c: Context, 
  id: string
): Promise<UserType | null> => {
  try {
    const prisma = getPrismaClient(c);
    return await prisma.user.findUnique({
      where: { id: id },
    });
  } catch (error) {
    console.error(\`Error fetching User by ID \${id}:\`, error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not fetch User by ID');
  }
};

/**
 * Updates a User record by its ID.
 * @param c The Hono context containing the Prisma client.
 * @param id The ID of the User to update.
 * @param data The data to update the User with.
 * @returns A promise resolving to the updated User record.
 */
export const updateUser = async (
  c: Context, 
  id: string, 
  data: UpdateUserInput
): Promise<UserType> => {
  try {
    const prisma = getPrismaClient(c);
    // Input data is assumed to be validated by Zod schema in the route handler
    return await prisma.user.update({
      where: { id: id },
      data,
    });
  } catch (error) {
    // TODO: Differentiate between Prisma's P2025 error (Record not found) and other errors
    console.error(\`Error updating User \${id}:\`, error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not update User');
  }
};

/**
 * Deletes a User record by its ID.
 * @param c The Hono context containing the Prisma client.
 * @param id The ID of the User to delete.
 * @returns A promise resolving to the deleted User record.
 */
export const deleteUser = async (
  c: Context, 
  id: string
): Promise<UserType> => {
  try {
    const prisma = getPrismaClient(c);
    return await prisma.user.delete({
      where: { id: id },
    });
  } catch (error) {
    // TODO: Differentiate between Prisma's P2025 error (Record not found) and other errors
    console.error(\`Error deleting User \${id}:\`, error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not delete User');
  }
};
"
`;

exports[`generateServiceFileContent > should generate service file content for a model without an ID 1`] = `
"
import type { PrismaClient } from '@prisma/client';
// We need to import the actual model type separately when verbatimModuleSyntax is true
import type { LogEntry as LogEntryType } from '@prisma/client';
// Import input types from Zod schemas (adjust path if necessary)
import { createLogEntrySchema, updateLogEntrySchema } from './schema';
import { z } from 'zod';
import type { Context } from 'hono';

// Define types inferred from Zod schemas for input validation
type CreateLogEntryInput = z.infer<typeof createLogEntrySchema>;
type UpdateLogEntryInput = z.infer<typeof updateLogEntrySchema>;

/**
 * Helper function to extract Prisma client from context with error handling
 */
const getPrismaClient = (c: Context): PrismaClient => {
  const prisma = c.get('prisma');
  if (!prisma) {
    throw new Error('Prisma client not found in context. Make sure to use the prismaMiddleware.');
  }
  return prisma;
};

/**
 * Finds multiple LogEntry records.
 * @param c The Hono context containing the Prisma client.
 * @returns A promise resolving to an array of LogEntry records.
 */
export const findManyLogEntry = async (c: Context): Promise<LogEntryType[]> => {
  try {
    const prisma = getPrismaClient(c);
    return await prisma.logEntry.findMany();
  } catch (error) {
    console.error('Error fetching LogEntrys:', error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not fetch LogEntrys');
  }
};

/**
 * Creates a new LogEntry record.
 * @param c The Hono context containing the Prisma client.
 * @param data The data for the new LogEntry.
 * @returns A promise resolving to the created LogEntry record.
 */
export const createLogEntry = async (
  c: Context, 
  data: CreateLogEntryInput
): Promise<LogEntryType> => {
  try {
    const prisma = getPrismaClient(c);
    // Input data is assumed to be validated by Zod schema in the route handler
    return await prisma.logEntry.create({ data });
  } catch (error) {
    console.error('Error creating LogEntry:', error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not create LogEntry');
  }
};
"
`;

exports[`generateServiceFileContent > should generate service file content with a custom prisma client path 1`] = `
"
import type { PrismaClient } from '../../libs/prisma';
// We need to import the actual model type separately when verbatimModuleSyntax is true
import type { User as UserType } from '../../libs/prisma';
// Import input types from Zod schemas (adjust path if necessary)
import { createUserSchema, updateUserSchema } from './schema';
import { z } from 'zod';
import type { Context } from 'hono';

// Define types inferred from Zod schemas for input validation
type CreateUserInput = z.infer<typeof createUserSchema>;
type UpdateUserInput = z.infer<typeof updateUserSchema>;

/**
 * Helper function to extract Prisma client from context with error handling
 */
const getPrismaClient = (c: Context): PrismaClient => {
  const prisma = c.get('prisma');
  if (!prisma) {
    throw new Error('Prisma client not found in context. Make sure to use the prismaMiddleware.');
  }
  return prisma;
};

/**
 * Finds multiple User records.
 * @param c The Hono context containing the Prisma client.
 * @returns A promise resolving to an array of User records.
 */
export const findManyUser = async (c: Context): Promise<UserType[]> => {
  try {
    const prisma = getPrismaClient(c);
    return await prisma.user.findMany();
  } catch (error) {
    console.error('Error fetching Users:', error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not fetch Users');
  }
};

/**
 * Creates a new User record.
 * @param c The Hono context containing the Prisma client.
 * @param data The data for the new User.
 * @returns A promise resolving to the created User record.
 */
export const createUser = async (
  c: Context, 
  data: CreateUserInput
): Promise<UserType> => {
  try {
    const prisma = getPrismaClient(c);
    // Input data is assumed to be validated by Zod schema in the route handler
    return await prisma.user.create({ data });
  } catch (error) {
    console.error('Error creating User:', error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not create User');
  }
};

/**
 * Finds a single User record by its ID.
 * @param c The Hono context containing the Prisma client.
 * @param id The ID of the User to find.
 * @returns A promise resolving to the User record or null if not found.
 */
export const findUserById = async (
  c: Context, 
  id: string
): Promise<UserType | null> => {
  try {
    const prisma = getPrismaClient(c);
    return await prisma.user.findUnique({
      where: { id: id },
    });
  } catch (error) {
    console.error(\`Error fetching User by ID \${id}:\`, error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not fetch User by ID');
  }
};

/**
 * Updates a User record by its ID.
 * @param c The Hono context containing the Prisma client.
 * @param id The ID of the User to update.
 * @param data The data to update the User with.
 * @returns A promise resolving to the updated User record.
 */
export const updateUser = async (
  c: Context, 
  id: string, 
  data: UpdateUserInput
): Promise<UserType> => {
  try {
    const prisma = getPrismaClient(c);
    // Input data is assumed to be validated by Zod schema in the route handler
    return await prisma.user.update({
      where: { id: id },
      data,
    });
  } catch (error) {
    // TODO: Differentiate between Prisma's P2025 error (Record not found) and other errors
    console.error(\`Error updating User \${id}:\`, error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not update User');
  }
};

/**
 * Deletes a User record by its ID.
 * @param c The Hono context containing the Prisma client.
 * @param id The ID of the User to delete.
 * @returns A promise resolving to the deleted User record.
 */
export const deleteUser = async (
  c: Context, 
  id: string
): Promise<UserType> => {
  try {
    const prisma = getPrismaClient(c);
    return await prisma.user.delete({
      where: { id: id },
    });
  } catch (error) {
    // TODO: Differentiate between Prisma's P2025 error (Record not found) and other errors
    console.error(\`Error deleting User \${id}:\`, error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not delete User');
  }
};
"
`;

exports[`generateServiceFileContent > should use number type for ID if the id field type is number 1`] = `
"
import type { PrismaClient } from '@prisma/client';
// We need to import the actual model type separately when verbatimModuleSyntax is true
import type { Product as ProductType } from '@prisma/client';
// Import input types from Zod schemas (adjust path if necessary)
import { createProductSchema, updateProductSchema } from './schema';
import { z } from 'zod';
import type { Context } from 'hono';

// Define types inferred from Zod schemas for input validation
type CreateProductInput = z.infer<typeof createProductSchema>;
type UpdateProductInput = z.infer<typeof updateProductSchema>;

/**
 * Helper function to extract Prisma client from context with error handling
 */
const getPrismaClient = (c: Context): PrismaClient => {
  const prisma = c.get('prisma');
  if (!prisma) {
    throw new Error('Prisma client not found in context. Make sure to use the prismaMiddleware.');
  }
  return prisma;
};

/**
 * Finds multiple Product records.
 * @param c The Hono context containing the Prisma client.
 * @returns A promise resolving to an array of Product records.
 */
export const findManyProduct = async (c: Context): Promise<ProductType[]> => {
  try {
    const prisma = getPrismaClient(c);
    return await prisma.product.findMany();
  } catch (error) {
    console.error('Error fetching Products:', error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not fetch Products');
  }
};

/**
 * Creates a new Product record.
 * @param c The Hono context containing the Prisma client.
 * @param data The data for the new Product.
 * @returns A promise resolving to the created Product record.
 */
export const createProduct = async (
  c: Context, 
  data: CreateProductInput
): Promise<ProductType> => {
  try {
    const prisma = getPrismaClient(c);
    // Input data is assumed to be validated by Zod schema in the route handler
    return await prisma.product.create({ data });
  } catch (error) {
    console.error('Error creating Product:', error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not create Product');
  }
};

/**
 * Finds a single Product record by its ID.
 * @param c The Hono context containing the Prisma client.
 * @param id The ID of the Product to find.
 * @returns A promise resolving to the Product record or null if not found.
 */
export const findProductById = async (
  c: Context, 
  id: number
): Promise<ProductType | null> => {
  try {
    const prisma = getPrismaClient(c);
    return await prisma.product.findUnique({
      where: { id: id },
    });
  } catch (error) {
    console.error(\`Error fetching Product by ID \${id}:\`, error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not fetch Product by ID');
  }
};

/**
 * Updates a Product record by its ID.
 * @param c The Hono context containing the Prisma client.
 * @param id The ID of the Product to update.
 * @param data The data to update the Product with.
 * @returns A promise resolving to the updated Product record.
 */
export const updateProduct = async (
  c: Context, 
  id: number, 
  data: UpdateProductInput
): Promise<ProductType> => {
  try {
    const prisma = getPrismaClient(c);
    // Input data is assumed to be validated by Zod schema in the route handler
    return await prisma.product.update({
      where: { id: id },
      data,
    });
  } catch (error) {
    // TODO: Differentiate between Prisma's P2025 error (Record not found) and other errors
    console.error(\`Error updating Product \${id}:\`, error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not update Product');
  }
};

/**
 * Deletes a Product record by its ID.
 * @param c The Hono context containing the Prisma client.
 * @param id The ID of the Product to delete.
 * @returns A promise resolving to the deleted Product record.
 */
export const deleteProduct = async (
  c: Context, 
  id: number
): Promise<ProductType> => {
  try {
    const prisma = getPrismaClient(c);
    return await prisma.product.delete({
      where: { id: id },
    });
  } catch (error) {
    // TODO: Differentiate between Prisma's P2025 error (Record not found) and other errors
    console.error(\`Error deleting Product \${id}:\`, error);
    // TODO: Implement more specific error handling and logging
    throw new Error('Could not delete Product');
  }
};
"
`;
