// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateControllerFileContent > should generate correct controller content for a model with numeric ID (Product) 1`] = `
"
import type { Context } from 'hono';
import { Prisma } from '@prisma/client';
import type { z } from 'zod';
import type { createProductSchema, updateProductSchema } from './schema';
type CreateInput = z.infer<typeof createProductSchema>;
type UpdateInput = z.infer<typeof updateProductSchema>;
import * as service from './service';

/**
 * Handles list product Product.
 */
export const listProduct = async (c: Context) => {
  
  
  try {
    const item = await service.findManyProducts(); // Use service namespace and correct args
    
    return c.json(item);
  } catch (error: unknown) {
    // Generic error handling for other cases
    const message = \`Error list producting Product: \${error instanceof Error ? error.message : 'Unknown error'}\`;
    console.error(message, error); // Log the detailed error
    return c.json({ error: \`Failed to list Product\` }, 500);
  }
};

/**
 * Handles create product Product.
 */
export const createProduct = async (c: Context) => {
  
  const data = c.req.valid('json') as CreateInput; // Assume json validation is set up in routes
  try {
    const item = await service.createProduct(data); // Use service namespace and correct args
    
    return c.json(item, 201);
  } catch (error: unknown) {
    // Generic error handling for other cases
    const message = \`Error create producting Product: \${error instanceof Error ? error.message : 'Unknown error'}\`;
    console.error(message, error); // Log the detailed error
    return c.json({ error: \`Failed to create Product\` }, 500);
  }
};

/**
 * Handles get product by id Product.
 */
export const getProductById = async (c: Context) => {
  const { id } = c.req.valid('param'); // Assume param validation is set up in routes
  
  try {
    const item = await service.findProductById(id); // Use service namespace and correct args
    
    if (!item) {
      return c.json({ error: 'Product not found' }, 404);
    }
    return c.json(item);
  } catch (error: unknown) {
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
      // Use the specific ID in the error message if available
      const message = \`Error get product by iding Product \${id}: Record not found\`;
      console.error(message, error);
      return c.json({ error: 'Product not found' }, 404);
    }
    // Generic error handling for other cases
    const message = \`Error get product by iding Product \${id}: \${error instanceof Error ? error.message : 'Unknown error'}\`;
    console.error(message, error); // Log the detailed error
    return c.json({ error: \`Failed to get Product\` }, 500);
  }
};

/**
 * Handles update product Product.
 */
export const updateProduct = async (c: Context) => {
  const { id } = c.req.valid('param'); // Assume param validation is set up in routes
  const data = c.req.valid('json') as UpdateInput; // Assume json validation is set up in routes
  try {
    const item = await service.updateProduct(id, data); // Use service namespace and correct args
    
    return c.json(item);
  } catch (error: unknown) {
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
      // Use the specific ID in the error message if available
      const message = \`Error update producting Product \${id}: Record not found\`;
      console.error(message, error);
      return c.json({ error: 'Product not found' }, 404);
    }
    // Generic error handling for other cases
    const message = \`Error update producting Product \${id}: \${error instanceof Error ? error.message : 'Unknown error'}\`;
    console.error(message, error); // Log the detailed error
    return c.json({ error: \`Failed to update Product\` }, 500);
  }
};

/**
 * Handles delete product Product.
 */
export const deleteProduct = async (c: Context) => {
  const { id } = c.req.valid('param'); // Assume param validation is set up in routes
  
  try {
    const item = await service.deleteProduct(id); // Use service namespace and correct args
    
    return c.json(item);
  } catch (error: unknown) {
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
      // Use the specific ID in the error message if available
      const message = \`Error delete producting Product \${id}: Record not found\`;
      console.error(message, error);
      return c.json({ error: 'Product not found' }, 404);
    }
    // Generic error handling for other cases
    const message = \`Error delete producting Product \${id}: \${error instanceof Error ? error.message : 'Unknown error'}\`;
    console.error(message, error); // Log the detailed error
    return c.json({ error: \`Failed to delete Product\` }, 500);
  }
};
"
`;

exports[`generateControllerFileContent > should generate correct controller content for a model without an ID (LogEntry) 1`] = `
"
import type { Context } from 'hono';
import { Prisma } from '@prisma/client';
import type { z } from 'zod';
import type { createLogEntrySchema, updateLogEntrySchema } from './schema';
type CreateInput = z.infer<typeof createLogEntrySchema>;
type UpdateInput = z.infer<typeof updateLogEntrySchema>;
import * as service from './service';

/**
 * Handles list log entry LogEntry.
 */
export const listLogEntry = async (c: Context) => {
  
  
  try {
    const item = await service.findManyLogEntries(); // Use service namespace and correct args
    
    return c.json(item);
  } catch (error: unknown) {
    // Generic error handling for other cases
    const message = \`Error list log entrying LogEntry: \${error instanceof Error ? error.message : 'Unknown error'}\`;
    console.error(message, error); // Log the detailed error
    return c.json({ error: \`Failed to list LogEntry\` }, 500);
  }
};

/**
 * Handles create log entry LogEntry.
 */
export const createLogEntry = async (c: Context) => {
  
  const data = c.req.valid('json') as CreateInput; // Assume json validation is set up in routes
  try {
    const item = await service.createLogEntry(data); // Use service namespace and correct args
    
    return c.json(item, 201);
  } catch (error: unknown) {
    // Generic error handling for other cases
    const message = \`Error create log entrying LogEntry: \${error instanceof Error ? error.message : 'Unknown error'}\`;
    console.error(message, error); // Log the detailed error
    return c.json({ error: \`Failed to create LogEntry\` }, 500);
  }
};
"
`;

exports[`generateControllerFileContent > should generate correct controller content for a standard model (User) 1`] = `
"
import type { Context } from 'hono';
import { Prisma } from '@prisma/client';
import type { z } from 'zod';
import type { createUserSchema, updateUserSchema } from './schema';
type CreateInput = z.infer<typeof createUserSchema>;
type UpdateInput = z.infer<typeof updateUserSchema>;
import * as service from './service';

/**
 * Handles list user User.
 */
export const listUser = async (c: Context) => {
  
  
  try {
    const item = await service.findManyUsers(); // Use service namespace and correct args
    
    return c.json(item);
  } catch (error: unknown) {
    // Generic error handling for other cases
    const message = \`Error list usering User: \${error instanceof Error ? error.message : 'Unknown error'}\`;
    console.error(message, error); // Log the detailed error
    return c.json({ error: \`Failed to list User\` }, 500);
  }
};

/**
 * Handles create user User.
 */
export const createUser = async (c: Context) => {
  
  const data = c.req.valid('json') as CreateInput; // Assume json validation is set up in routes
  try {
    const item = await service.createUser(data); // Use service namespace and correct args
    
    return c.json(item, 201);
  } catch (error: unknown) {
    // Generic error handling for other cases
    const message = \`Error create usering User: \${error instanceof Error ? error.message : 'Unknown error'}\`;
    console.error(message, error); // Log the detailed error
    return c.json({ error: \`Failed to create User\` }, 500);
  }
};

/**
 * Handles get user by id User.
 */
export const getUserById = async (c: Context) => {
  const { id } = c.req.valid('param'); // Assume param validation is set up in routes
  
  try {
    const item = await service.findUserById(id); // Use service namespace and correct args
    
    if (!item) {
      return c.json({ error: 'User not found' }, 404);
    }
    return c.json(item);
  } catch (error: unknown) {
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
      // Use the specific ID in the error message if available
      const message = \`Error get user by iding User \${id}: Record not found\`;
      console.error(message, error);
      return c.json({ error: 'User not found' }, 404);
    }
    // Generic error handling for other cases
    const message = \`Error get user by iding User \${id}: \${error instanceof Error ? error.message : 'Unknown error'}\`;
    console.error(message, error); // Log the detailed error
    return c.json({ error: \`Failed to get User\` }, 500);
  }
};

/**
 * Handles update user User.
 */
export const updateUser = async (c: Context) => {
  const { id } = c.req.valid('param'); // Assume param validation is set up in routes
  const data = c.req.valid('json') as UpdateInput; // Assume json validation is set up in routes
  try {
    const item = await service.updateUser(id, data); // Use service namespace and correct args
    
    return c.json(item);
  } catch (error: unknown) {
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
      // Use the specific ID in the error message if available
      const message = \`Error update usering User \${id}: Record not found\`;
      console.error(message, error);
      return c.json({ error: 'User not found' }, 404);
    }
    // Generic error handling for other cases
    const message = \`Error update usering User \${id}: \${error instanceof Error ? error.message : 'Unknown error'}\`;
    console.error(message, error); // Log the detailed error
    return c.json({ error: \`Failed to update User\` }, 500);
  }
};

/**
 * Handles delete user User.
 */
export const deleteUser = async (c: Context) => {
  const { id } = c.req.valid('param'); // Assume param validation is set up in routes
  
  try {
    const item = await service.deleteUser(id); // Use service namespace and correct args
    
    return c.json(item);
  } catch (error: unknown) {
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
      // Use the specific ID in the error message if available
      const message = \`Error delete usering User \${id}: Record not found\`;
      console.error(message, error);
      return c.json({ error: 'User not found' }, 404);
    }
    // Generic error handling for other cases
    const message = \`Error delete usering User \${id}: \${error instanceof Error ? error.message : 'Unknown error'}\`;
    console.error(message, error); // Log the detailed error
    return c.json({ error: \`Failed to delete User\` }, 500);
  }
};
"
`;
