// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateRoutesFileContent > should generate correct route file content for a User model 1`] = `
"import { OpenAPIHono, createRoute, z } from '@hono/zod-openapi';
import type { Context } from 'hono';
import { UserSchema, createUserSchema, updateUserSchema } from './user.schema';
import { Role } from '@prisma/client';
import { 
  findManyUsers, 
  findUserById, 
  createUser, 
  updateUser, 
  deleteUser 
} from './service';



// --- Route Definitions ---
// NOTE: Placeholder handlers are removed. We now use imported service functions directly.

// GET /users
const listUserRoute = createRoute({
  method: 'get',
  path: '/',
  tags: ['User'],
  summary: 'List all users',
  responses: {
    200: {
      description: 'Returns a list of users',
      content: {
        'application/json': {
          schema: z.array(UserSchema),
        },
      },
    },
    // TODO: Define 500 error response
  },
});

// GET /users/{id}
const getUserByIdRoute = createRoute({
  method: 'get',
  path: '/{id}',
  tags: ['User'],
  summary: 'Get a user by ID',
  request: {
    params: z.object({
      id: z.string().pipe(z.coerce.number().int({ message: "Invalid ID format"})),
    }),
  },
  responses: {
    200: {
      description: 'Returns the user',
      content: {
        'application/json': {
          schema: UserSchema,
        },
      },
    },
    404: {
      description: 'User not found',
      // TODO: Define standard error schema
    },
    // TODO: Define 400, 500 error responses
  },
});

// POST /users
const createUserRoute = createRoute({
  method: 'post',
  path: '/',
  tags: ['User'],
  summary: 'Create a new user',
  request: {
    body: {
      content: {
        'application/json': {
          schema: createUserSchema,
        },
      },
    },
  },
  responses: {
    201: {
      description: 'Returns the created user',
      content: {
        'application/json': {
          schema: UserSchema,
        },
      },
    },
    400: {
      description: 'Invalid input',
      // TODO: Define standard error schema
    },
    // TODO: Define 500 error response
  },
});

// PATCH /users/{id}
const updateUserRoute = createRoute({
  method: 'patch',
  path: '/{id}',
  tags: ['User'],
  summary: 'Update a user by ID',
  request: {
    params: z.object({
      id: z.string().pipe(z.coerce.number().int({ message: "Invalid ID format"})),
    }),
    body: {
      content: {
        'application/json': {
          schema: updateUserSchema,
        },
      },
    },
  },
  responses: {
    200: {
      description: 'Returns the updated user',
      content: {
        'application/json': {
          schema: UserSchema,
        },
      },
    },
    400: {
      description: 'Invalid input',
      // TODO: Define standard error schema
    },
    404: {
      description: 'User not found',
      // TODO: Define standard error schema
    },
     // TODO: Define 500 error response
  },
});

// DELETE /users/{id}
const deleteUserRoute = createRoute({
  method: 'delete',
  path: '/{id}',
  tags: ['User'],
  summary: 'Delete a user by ID',
  request: {
    params: z.object({
      id: z.string().pipe(z.coerce.number().int({ message: "Invalid ID format"})),
    }),
  },
  responses: {
    200: { // Consider 204 No Content if not returning the object
      description: 'User deleted successfully',
      content: {
        'application/json': {
            // Optional: Return the deleted object's ID or a success message
            schema: z.object({ id: z.number() }) // Correct usage of idZodType
        },
      },
    },
    404: {
      description: 'User not found',
      // TODO: Define standard error schema
    },
    // TODO: Define 400, 500 error responses
  },
});




// --- Route Handlers ---

// GET /
const handleListUser = async (c: Context) => {
  // TODO: Add error handling (try/catch)
  const results = await findManyUsers();
  return c.json(results);
};

// GET /:id
const handleGetUserById = async (c: Context) => {
  const id = c.req.valid('param').id;
  // TODO: Add error handling (try/catch, check for null)
  const result = await findUserById(id);
  if (!result) {
    return c.json({ error: 'User not found' }, 404);
  }
  return c.json(result);
};

// POST /
const handleCreateUser = async (c: Context) => {
  const data = c.req.valid('json');
  // TODO: Add error handling (try/catch)
  const newItem = await createUser(data);
  return c.json(newItem, 201);
};

// PATCH /:id
const handleUpdateUser = async (c: Context) => {
  const id = c.req.valid('param').id;
  const data = c.req.valid('json');
   // TODO: Add error handling (try/catch, handle Prisma P2025 error for 404)
  const updatedItem = await updateUser(id, data);
  return c.json(updatedItem);
};

// DELETE /:id
const handleDeleteUser = async (c: Context) => {
  const id = c.req.valid('param').id;
  // TODO: Add error handling (try/catch, handle Prisma P2025 error for 404)
  const deletedItem = await deleteUser(id);
  return c.json(deletedItem);
};




// --- Hono App Setup ---
const userRoutes = new OpenAPIHono();

// Register routes with their handlers
userRoutes.openapi(listUserRoute, handleListUser);
userRoutes.openapi(getUserByIdRoute, handleGetUserById);
userRoutes.openapi(createUserRoute, handleCreateUser);
userRoutes.openapi(updateUserRoute, handleUpdateUser);
userRoutes.openapi(deleteUserRoute, handleDeleteUser);

export default userRoutes;
"
`;

exports[`generateRoutesFileContent > should return an error string if model has no ID field 1`] = `"// Error: Model LogEntry has no ID field. Cannot generate standard CRUD routes."`;
